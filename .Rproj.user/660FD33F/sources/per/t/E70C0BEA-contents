################################################################################
### Interactive RNAseq Data Browser - Shiny Application
### Version 1.0 - Interactive Volcano Plots and Gene Set Analysis
### Date: 2024
### FIXED: Corrected syntax errors and brace placement
################################################################################

# Load required libraries
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(plotly)
library(DT)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(viridis)
library(RColorBrewer)
library(readr)

################################################################################
### GLOBAL SETTINGS
################################################################################

# Define cell lines and time points
CELL_LINES <- c("MIN6", "aTC1", "MGN3", "GLUTag", "PCCL3", "QGP1")
TIME_POINTS <- c("6h", "24h")

# Significance thresholds
FC_CUTOFF_HIGH <- log2(2)
FC_CUTOFF_LOW <- log2(0.5)
PVAL_CUTOFF <- 0.05

# Color schemes
VOLCANO_COLORS <- c("Decreased" = "steelblue1", 
                    "Increased" = "tomato1", 
                    "Unchanged" = "grey70")

################################################################################
### DATA LOADING FUNCTIONS
################################################################################

#' Load merged edgeR and TPM data
#' @param file_path Path to merged data file
#' @return Data frame with all results
load_merged_data <- function(file_path = "merged edgeR and TPMs/merged_edgeR_TPMs_all_lines.txt") {
  if (file.exists(file_path)) {
    tryCatch({
      data <- read.delim(file_path, header = TRUE, stringsAsFactors = FALSE)
      
      # Remove any rows that contain column headers as data
      if (any(data$genes == "genes")) {
        data <- data[data$genes != "genes", ]
      }
      
      # Convert numeric columns - be more careful with conversion
      numeric_cols <- grep("logFC|FDR|PValue|logCPM|TPM", colnames(data))
      for (col in numeric_cols) {
        # Only convert if not already numeric
        if (!is.numeric(data[[col]])) {
          data[[col]] <- suppressWarnings(as.numeric(data[[col]]))
        }
      }
      
      # Remove rows where gene names are NA or empty
      data <- data[!is.na(data$genes) & data$genes != "", ]
      
      return(data)
    }, error = function(e) {
      print(paste("Error loading data:", e$message))
      return(data.frame(genes = character(0)))
    })
  } else {
    # Return empty data frame with expected structure if file not found
    return(data.frame(genes = character(0)))
  }
}

#' Prepare data for volcano plot
#' @param data Full dataset
#' @param cell_line Selected cell line
#' @param time_point Selected time point
#' @return Data frame ready for plotting
prepare_volcano_data <- function(data, cell_line, time_point) {
  
  logfc_col <- paste0("logFC_TgvDMSO_", time_point, "_", cell_line)
  fdr_col <- paste0("FDR_TgvDMSO_", time_point, "_", cell_line)

  # Check required columns exist
  if (!all(c(logfc_col, fdr_col) %in% colnames(data))) {
    return(NULL)
  }
  
  # Build plot data with available columns
  plot_data <- data %>%
    dplyr::select(genes, all_of(c(logfc_col, fdr_col)))
  
  # Rename columns for easier handling
  plot_data <- plot_data %>%
    dplyr::rename(logFC = !!logfc_col, FDR = !!fdr_col) %>%
    dplyr::filter(!is.na(logFC) & !is.na(FDR)) %>%
    mutate(
      Change = case_when(
        logFC > FC_CUTOFF_HIGH & FDR < PVAL_CUTOFF ~ "Increased",
        logFC < FC_CUTOFF_LOW & FDR < PVAL_CUTOFF ~ "Decreased",
        TRUE ~ "Unchanged"
      ),
      neg_log10_fdr = -log10(pmax(FDR, 1e-300)),
      hover_text = paste0(
        "Gene: ", genes, "<br>",
        "Log2 FC: ", round(logFC, 3), "<br>",
        "FDR: ", format(FDR, scientific = TRUE, digits = 3), "<br>",
        "Status: ", Change
      )
    )
  
  return(plot_data)
}


#' Prepare data for dot plot 
#' @param data Full dataset
#' @param cell_line Selected cell line
#' @param time_point Selected time point
#' @return Data frame ready for plotting
prepare_dotplot_data <- function(data, genes, time_point) {
  
  # IMPORTANT: genes should already be in the desired order
  print(paste("prepare_dotplot_data received genes in order:", paste(genes, collapse=", ")))
  
  # Filter for requested genes - maintain order
  gene_data <- data %>%
    dplyr::filter(genes %in% !!genes)
  
  if (nrow(gene_data) == 0) {
    return(NULL)
  }
  
  # Gather data for all cell lines
  plot_data <- list()
  
  for (cell_line in CELL_LINES) {
    logfc_col <- paste0("logFC_TgvDMSO_", time_point, "_", cell_line)
    fdr_col <- paste0("FDR_TgvDMSO_", time_point, "_", cell_line)
    
    # Get TPM columns
    tpm_pattern <- paste0(cell_line, "_(DMSO|Tg)_")
    tpm_cols <- grep(tpm_pattern, colnames(gene_data), value = TRUE)
    
    if (logfc_col %in% colnames(gene_data)) {
      # Calculate average TPMs
      avg_tpm <- 0
      if (length(tpm_cols) > 0) {
        tpm_values <- gene_data[, tpm_cols, drop = FALSE]
        avg_tpm <- rowMeans(tpm_values, na.rm = TRUE)
      }
      
      cell_data <- data.frame(
        gene = gene_data$genes,
        cell_line = cell_line,
        logFC = as.numeric(gene_data[[logfc_col]]),
        FDR = if(fdr_col %in% colnames(gene_data)) as.numeric(gene_data[[fdr_col]]) else NA,
        avg_tpm = avg_tpm,
        expression = log10(avg_tpm + 1),
        stringsAsFactors = FALSE
      )
      
      plot_data[[cell_line]] <- cell_data
    }
  }
  
  if (length(plot_data) > 0) {
    combined_data <- do.call(rbind, plot_data)
    
    # CRITICAL: Set factor levels to the original input order
    combined_data$gene <- factor(combined_data$gene, levels = genes)
    
    # Add significance and regulation
    combined_data <- combined_data %>%
      mutate(
        significance = case_when(
          is.na(FDR) ~ "",
          FDR < 0.001 ~ "***",
          FDR < 0.01 ~ "**",
          FDR < 0.05 ~ "*",
          TRUE ~ ""
        ),
        regulation = case_when(
          is.na(FDR) | is.na(logFC) ~ "NS",
          logFC > 0 & FDR < 0.05 ~ "Up",
          logFC < 0 & FDR < 0.05 ~ "Down",
          TRUE ~ "NS"
        ),
        neg_log10_fdr = -log10(pmax(FDR, 1e-300, na.rm = TRUE))
      )
    
    # Debug: print the factor levels
    print(paste("Factor levels set to:", paste(levels(combined_data$gene), collapse=", ")))
    
    return(combined_data)
  }
  
  return(NULL)
}

################################################################################
### USER INTERFACE
################################################################################

ui <- dashboardPage(
  dashboardHeader(
    title = "Endocrine ER Stress"
    ),
  
  dashboardSidebar(
    sidebarMenu(
      menuItem("Volcano Plots", tabName = "volcano", icon = icon("chart-scatter")),
      menuItem("Gene Set Analysis", tabName = "geneset", icon = icon("dna")),
      menuItem("Data Table", tabName = "datatable", icon = icon("table")),
      menuItem("Cell Line Comparison", tabName = "comparison", icon = icon("exchange-alt")),
      menuItem("Upset Plot", tabName = "upset", icon = icon("project-diagram")),
      menuItem("GSEA Results", tabName = "gsea", icon = icon("chart-line")),
      menuItem("Help", tabName = "help", icon = icon("question-circle"))
    )
  ),
  
  dashboardBody(
    tags$head(
      tags$style(HTML("
        .content-wrapper, .right-side {
          background-color: #f4f4f4;
        }
        .box {
          box-shadow: 0 2px 5px 0 rgba(0,0,0,.16), 0 2px 10px 0 rgba(0,0,0,.12);
        }
      "))
    ),
    
    tabItems(
      # Volcano Plot Tab
      tabItem(
        tabName = "volcano",
        fluidRow(
          box(
            title = "Volcano Plot Controls",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 3,
              selectInput(
                "volcano_cell_line",
                "Select Cell Line:",
                choices = CELL_LINES,
                selected = CELL_LINES[1]
              )
            ),
            column(
              width = 3,
              selectInput(
                "volcano_time_point",
                "Select Time Point:",
                choices = TIME_POINTS,
                selected = TIME_POINTS[1]
              )
            ),
            column(
              width = 3,
              numericInput(
                "volcano_fdr_cutoff",
                "FDR Cutoff:",
                value = 0.05,
                min = 0.001,
                max = 1,
                step = 0.01
              )
            ),
            column(
              width = 3,
              numericInput(
                "volcano_fc_cutoff",
                "Fold Change Cutoff (log2):",
                value = 1,
                min = 0,
                max = 5,
                step = 0.1
              )
            )
          )
        ),
        fluidRow(
          box(
            title = "Interactive Volcano Plot",
            status = "primary",
            width = 8,
            plotlyOutput("volcano_plot", height = "600px")
          ),
          box(
            title = "Plot Statistics",
            status = "info",
            width = 4,
            tableOutput("volcano_stats"),
            br(),
            downloadButton("download_volcano_data", "Download Filtered Data"),
            br(),
            br(),
            h4("Selected Genes:"),
            verbatimTextOutput("selected_genes")
          )
        ),
        fluidRow(
          box(
            title = "Significant Genes Table",
            status = "primary",
            width = 12,
            DTOutput("volcano_table")
          )
        )
      ),
      
      # Gene Set Analysis Tab
      tabItem(
        tabName = "geneset",
        fluidRow(
          box(
            title = "Gene Set Input",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 6,
              textAreaInput(
                "gene_list",
                "Enter Gene Symbols (one per line or comma-separated):",
                height = "200px",
                placeholder = "Example:\nDdit3\nHspa5\nAtf4\nXbp1"
              ),
              actionButton("analyze_genes", "Analyze Gene Set", 
                           class = "btn-primary", icon = icon("play")),
              br(),
              br(),
              h5("Predefined Gene Sets:"),
              fluidRow(
                column(12,
                       h6("Brief default gene sets:"),
                       actionButton("load_er_stress", "ER Stress", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_apoptosis", "Apoptosis", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_beta_cell", "Beta Cell", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_mitochondrial", "Mitochondrial", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_autophagy", "Autophagy", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_cell_cycle", "Cell Cycle", class = "btn-info btn-sm", style = "margin: 2px;")
                )
              ),
              br(),
              fluidRow(
                column(12,
                       h6("ER Stress & UPR:"),
                       actionButton("load_upr_er", "UPR-ER", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_upr_mito", "UPR-Mito", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_erad", "ERAD", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_ire1_xbp1", "IRE1/XBP1s", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_perk", "PERK", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_atf6", "ATF6", class = "btn-info btn-sm", style = "margin: 2px;")
                )
              ),
              br(),
              fluidRow(
                column(12,
                       h6("Cell Death & Survival:"),
                       actionButton("load_cell_death", "Cell Death", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_autophagy", "Autophagy", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_prosurvival", "Pro-survival", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_apoptosis_classic", "Apoptosis", class = "btn-info btn-sm", style = "margin: 2px;")
                )
              ),
              br(),
              fluidRow(
                column(12,
                       h6("Beta Cell Function:"),
                       actionButton("load_beta_tfs", "Beta Cell TFs", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_insulin_secretion", "Insulin Secretion", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_ca_handling", "Ca2+/K+ Handling", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_disallowed", "Disallowed Genes", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_exocytosis", "Exocytosis", class = "btn-info btn-sm", style = "margin: 2px;")
                )
              ),
              br(),
              fluidRow(
                column(12,
                       h6("Metabolism:"),
                       actionButton("load_glycolysis", "Glycolysis/TCA", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_serine_1c", "Serine/1C", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_purine", "Purine Biosyn", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_redox", "Redox Stress", class = "btn-info btn-sm", style = "margin: 2px;")
                )
              ),
              br(),
              fluidRow(
                column(12,
                       h6("Other Pathways:"),
                       actionButton("load_ier", "Immediate Early", class = "btn-info btn-sm", style = "margin: 2px;"),
                       actionButton("load_hyperins_mody", "Hyperins/MODY", class = "btn-info btn-sm", style = "margin: 2px;")
                )
              ),
              
              br(),
              
              hr(),  # Visual separator
              fluidRow(
                column(12,
                       h5("Cell Line Unique Gene Sets:"),
                       p("Top differentially expressed genes unique to each cell line. 12 up-regulated, 12 down-regulated, or both combined", style = "font-size: 12px; color: grey;"),
                       uiOutput("unique_gene_buttons")  # This will be populated dynamically
                )
              )
            ),
            column(
              width = 6,
              selectInput(
                "geneset_time_point",
                "Select Time Point:",
                choices = TIME_POINTS,
                selected = TIME_POINTS[1]
              ),
              radioButtons(
                "plot_color_by",
                "Color Dots By:",
                choices = c("FDR" = "fdr", 
                            "Log Fold Change" = "logfc"),
                selected = "logfc"
              ),
              checkboxInput("show_significance", "Show Significance Stars", TRUE),
              br(),
              downloadButton("download_geneset_plot", "Download Plot")
            )
          )
        ),
        
        fluidRow(
          box(
            title = "Gene Expression Dot Plot",
            status = "primary",
            width = 12,
            uiOutput("geneset_plot_ui")
          )
        ),
        fluidRow(
          box(
            title = "Gene Set Data Table",
            status = "primary",
            width = 12,
            DTOutput("geneset_table")
          )
        )
      ),
      
      # Data Table Tab
      tabItem(
        tabName = "datatable",
        fluidRow(
          box(
            title = "Data Filters",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 12,
              h4("Select Cell Lines to Display:"),
              fluidRow(
                column(width = 2, checkboxInput("show_MIN6", "MIN6", value = TRUE)),
                column(width = 2, checkboxInput("show_aTC1", "aTC1", value = TRUE)),
                column(width = 2, checkboxInput("show_MGN3", "MGN3", value = TRUE)),
                column(width = 2, checkboxInput("show_GLUTag", "GLUTag", value = TRUE)),
                column(width = 2, checkboxInput("show_PCCL3", "PCCL3", value = TRUE)),
                column(width = 2, checkboxInput("show_QGP1", "QGP1", value = TRUE))
              ),
              fluidRow(
                column(width = 4, 
                       actionButton("select_all_cells", "Select All", class = "btn-sm btn-primary"),
                       actionButton("clear_all_cells", "Clear All", class = "btn-sm btn-warning")),
                column(width = 8,
                       p("Filter to show only selected cell lines in the table below"))
              )
            )
          )
        ),
        fluidRow(
          box(
            title = "Filtered Dataset",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 12,
              h4("Explore the dataset with selected cell lines"),
              br(),
              DTOutput("full_data_table"),
              br(),
              downloadButton("download_full_data", "Download Filtered Dataset (CSV)")
            )
          )
        )
      ),
      
      # Cell Line Comparison Tab
      tabItem(
        tabName = "comparison",
        fluidRow(
          box(
            title = "Cell Line Comparison Controls",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 3,
              selectInput(
                "comp_cell_x",
                "X-axis Cell Line:",
                choices = CELL_LINES,
                selected = CELL_LINES[1]
              )
            ),
            column(
              width = 3,
              selectInput(
                "comp_cell_y",
                "Y-axis Cell Line:",
                choices = CELL_LINES,
                selected = CELL_LINES[2]
              )
            ),
            column(
              width = 3,
              selectInput(
                "comp_time_point",
                "Time Point:",
                choices = TIME_POINTS,
                selected = TIME_POINTS[1]
              )
            ),
            column(
              width = 3,
              numericInput(
                "comp_fdr_cutoff",
                "FDR Cutoff for Highlighting:",
                value = 0.05,
                min = 0.001,
                max = 1,
                step = 0.01
              )
            )
          )
        ),
        fluidRow(
          box(
            title = "Log2 Fold Change Comparison",
            status = "primary",
            width = 8,
            plotlyOutput("comparison_plot", height = "600px")
          ),
          box(
            title = "Correlation Statistics",
            status = "info",
            width = 4,
            tableOutput("comparison_stats"),
            br(),
            downloadButton("download_comparison_plot", "Download Plot"),
            br(),
            br(),
            downloadButton("download_comparison_data", "Download Data"),
            br(),
            br(),
            h4("Top Concordant Genes:"),
            DTOutput("concordant_genes"),
            br(),
            h4("Top Discordant Genes:"),
            DTOutput("discordant_genes")
          )
        )
      ),
      
      # Upset Plot Tab
      tabItem(
        tabName = "upset",
        fluidRow(
          box(
            title = "Upset Plot Controls",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 3,
              selectInput(
                "upset_time_point",
                "Time Point:",
                choices = c("6h", "24h"),  # REMOVED "Both" option
                selected = "6h"  # Default to 6h
              )
            ),
            column(
              width = 3,
              numericInput(
                "upset_fc_cutoff",
                "Fold Change Cutoff (linear):",
                value = 1.5,
                min = 1,
                max = 5,
                step = 0.1
              )
            ),
            column(
              width = 3,
              numericInput(
                "upset_fdr_cutoff",
                "FDR Cutoff:",
                value = 0.05,
                min = 0.001,
                max = 0.1,
                step = 0.01
              )
            ),
            column(
              width = 3,
              numericInput(
                "upset_n_intersections",
                "Max Intersections:",
                value = 45,
                min = 5,
                max = 100,
                step = 5
              )
            )
          )
        ),
        fluidRow(
          box(
            title = "Interactive Upset Plot",
            status = "primary",
            width = 12,
            plotlyOutput("upset_plot", height = "700px"),
            br(),
            p("Click on intersections to see gene lists below.", 
              "Set sizes shown are based on current filter settings.")
          )
        ),
        fluidRow(
          box(
            title = "Intersection Details",
            status = "info",
            width = 12,
            h4("Selected Intersection Genes:"),
            downloadButton("download_intersection_genes", "Download Gene List"),
            br(),
            br(),
            DTOutput("intersection_genes")
          )
        )
      ),
      
      # GSEA Results Tab
      tabItem(
        tabName = "gsea",
        fluidRow(
          box(
            title = "GSEA Filters",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            column(
              width = 3,
              selectInput(
                "gsea_cell_line",
                "Cell Line:",
                choices = c("All", CELL_LINES),
                selected = "All"
              )
            ),
            column(
              width = 3,
              selectInput(
                "gsea_time_point",
                "Time Point:",
                choices = c("All", "6h", "24h"),
                selected = "All"
              )
            ),
            column(
              width = 3,
              selectInput(
                "gsea_collection",
                "Collection:",
                choices = c("All", "Hallmark", "KEGG", "GO_BP", "Reactome"),
                selected = "All"
              )
            ),
            column(
              width = 3,
              numericInput(
                "gsea_fdr_cutoff",
                "FDR Cutoff:",
                value = 0.05,
                min = 0.001,
                max = 0.25,
                step = 0.01
              )
            )
          )
        ),
        fluidRow(
          box(
            title = "GSEA Heatmap",
            status = "primary",
            width = 12,
            plotOutput("gsea_heatmap", height = "600px"),
            br(),
            downloadButton("download_gsea_plot", "Download Plot")
          )
        ),
        fluidRow(
          box(
            title = "GSEA Results Table",
            status = "primary",
            width = 12,
            DTOutput("gsea_table"),
            br(),
            downloadButton("download_gsea_data", "Download Filtered Data")
          )
        )
      ),
      
      # Help Tab
      tabItem(
        tabName = "help",
        fluidRow(
          box(
            title = "How to Use This App",
            status = "info",
            solidHeader = TRUE,
            width = 12,
            h3("Overview"),
            p("This Shiny application allows you to interactively explore RNAseq data from six cell lines treated with Thapsigargin (Tg) at two time points (6h and 24h)."),
            
            hr(),
            
            h3("1. Volcano Plots"),
            p("Navigate to the 'Volcano Plots' tab to:"),
            tags$ul(
              tags$li("Select a cell line and time point to visualize differential expression"),
              tags$li("Adjust FDR and fold change cutoffs to highlight significant genes"),
              tags$li("Hover over points to see gene details"),
              tags$li("Click and drag to zoom in on regions of interest"),
              tags$li("Double-click to reset the zoom"),
              tags$li("Download the filtered data for further analysis")
            ),
            
            h3("2. Gene Set Analysis"),
            p("Navigate to the 'Gene Set Analysis' tab to:"),
            tags$ul(
              tags$li("Enter custom gene lists (one gene per line or comma-separated)"),
              tags$li("Load predefined gene sets for common pathways"),
              tags$li("Visualize expression patterns across all cell lines"),
              tags$li("Color dots by significance (FDR) or fold change"),
              tags$li("Download the resulting plots and data tables")
            ),
            
            h3("3. Data Table"),
            p("Navigate to the 'Data Table' tab to:"),
            tags$ul(
              tags$li("Browse the complete dataset with all genes and conditions"),
              tags$li("Filter by cell lines using checkboxes"),
              tags$li("Use the search box to find specific genes"),
              tags$li("Sort columns by clicking on headers"),
              tags$li("Download the filtered dataset as CSV")
            ),
            
            h3("4. Cell Line Comparison"),
            p("Navigate to the 'Cell Line Comparison' tab to:"),
            tags$ul(
              tags$li("Compare log2 fold changes between any two cell lines"),
              tags$li("Visualize correlation between cell line responses"),
              tags$li("Identify concordant genes (same direction of change)"),
              tags$li("Find discordant genes (opposite direction of change)"),
              tags$li("Adjust FDR cutoffs to highlight significant genes"),
              tags$li("Download comparison plots and data")
            ),
            
            h3("5. Upset Plot"),
            p("Navigate to the 'Upset Plot' tab to:"),
            tags$ul(
              tags$li("Visualize gene set overlaps across multiple cell lines"),
              tags$li("Select time points (6h, 24h, or both) for analysis"),
              tags$li("Adjust fold change and FDR cutoffs to define significant genes"),
              tags$li("Control the number of intersections displayed"),
              tags$li("Click on bars to see genes in specific intersections"),
              tags$li("Download gene lists from selected intersections")
            ),
            
            h3("6. GSEA Results"),
            p("Navigate to the 'GSEA Results' tab to:"),
            tags$ul(
              tags$li("Explore Gene Set Enrichment Analysis results"),
              tags$li("Filter by cell line, time point, and gene collections"),
              tags$li("View enrichment heatmaps with normalized enrichment scores (NES)"),
              tags$li("Browse pathway tables with significance levels"),
              tags$li("Download GSEA plots and filtered results"),
              tags$li("Significance markers: * FDR<0.05, ** FDR<0.01, *** FDR<0.001")
            ),
            
            hr(),
            
            h3("Data Description"),
            p("Cell Lines:"),
            tags$ul(
              tags$li("MIN6, aTC1, MGN3, GLUTag (mouse)"),
              tags$li("PCCL3 (rat)"),
              tags$li("QGP1 (human)")
            ),
            p("All non-mouse genes have been converted to mouse orthologs for cross-species comparison."),
            
            h3("Statistical Measures"),
            tags$ul(
              tags$li("logFC: log2 fold change (Tg vs DMSO)"),
              tags$li("FDR: False Discovery Rate (adjusted p-value)"),
              tags$li("TPM: Transcripts Per Million (expression level)"),
              tags$li("NES: Normalized Enrichment Score (GSEA)")
            ),
            
            h3("Tips for Analysis"),
            tags$ul(
              tags$li("Start with volcano plots to get an overview of each cell line's response"),
              tags$li("Use gene set analysis to explore specific biological pathways"),
              tags$li("Compare cell lines to identify conserved vs. unique responses"),
              tags$li("Use upset plots to find genes shared across multiple conditions"),
              tags$li("Explore GSEA results for pathway-level insights")
            ),
            
            hr(),
            
            h3("Contact"),
            p("For questions or issues, please contact the bioinformatics team.")
          )
        )
      )
    )
  )
)

################################################################################
### SERVER LOGIC
################################################################################

server <- function(input, output, session) {
  
  
  # Check if data directory exists, if not create it
  if (!dir.exists("data")) {
    dir.create("data")
  }
  
  update_config <- function() {
    config <- list(
      has_gsea = TRUE,  # Set to TRUE since you have GSEA data
      has_upset = TRUE,
      has_unique = TRUE  # Set to TRUE if you have unique gene sets
    )
    saveRDS(config, "data/app_config.rds")
    print("Configuration updated!")
  }
  update_config()
  
  # Create dummy configuration if it doesn't exist
  if (!file.exists("data/app_config.rds")) {
    app_config <- list(
      has_gsea = TRUE,  # Set to TRUE if you have GSEA data
      has_upset = TRUE,
      has_unique = TRUE  # Set to TRUE if you have unique gene sets
    )
    saveRDS(app_config, "data/app_config.rds")
  }
  
  # Load data (reactive)
  merged_data <- reactive({
    data <- load_merged_data()
    if (nrow(data) == 0) {
      showNotification("Data file not found. Please ensure 'merged_edgeR_TPMs_all_lines.txt' is in the correct directory.",
                       type = "error", duration = NULL)
    }
    data
  })
  # Load configuration
  app_config <- reactive({
    config_file <- "data/app_config.rds"
    if (file.exists(config_file)) {
      config <- readRDS(config_file)
      print(paste("Config loaded - has_gsea:", config$has_gsea))  # Debug print
      return(config)
    } else {
      print("Config file not found, using defaults")  # Debug print
      return(list(has_gsea = FALSE, has_upset = FALSE, has_unique = FALSE))
    }
  })
  
  # Load GSEA results
  gsea_data <- reactive({
    config <- app_config()
    print(paste("Loading GSEA - config says has_gsea:", config$has_gsea))  # Debug
    
    if (!is.null(config) && !is.null(config$has_gsea) && config$has_gsea) {
      gsea_file <- "data/gsea_results.rds"
      if (file.exists(gsea_file)) {
        data <- readRDS(gsea_file)
        # Clean data - remove NA rows
        data_clean <- data %>%
          filter(!is.na(pathway) & pathway != "") %>%
          filter(!is.na(NES)) %>%
          filter(!is.na(padj))
        
        print(paste("GSEA data loaded:", nrow(data_clean), "rows"))  # Debug
        return(data_clean)
      } else {
        print("GSEA file not found")  # Debug
      }
    } else {
      print("GSEA disabled in config")  # Debug
    }
    return(NULL)
  })
  
  # Load upset data
  upset_data_raw <- reactive({
    if (app_config()$has_upset) {
      upset_file <- "data/upset_data.rds"
      if (file.exists(upset_file)) {
        return(readRDS(upset_file))
      }
    }
    return(NULL)
  })
  
  # Load unique gene sets
  unique_gene_sets <- reactive({
    if (app_config()$has_unique) {
      unique_file <- "data/unique_gene_sets.rds"
      if (file.exists(unique_file)) {
        return(readRDS(unique_file))
      }
    }
    return(NULL)
  })
  
  
  # Volcano plot data (reactive)
  volcano_data <- reactive({
    req(merged_data())
    prepare_volcano_data(merged_data(), input$volcano_cell_line, input$volcano_time_point)
  })
  
  # Render volcano plot
  output$volcano_plot <- renderPlotly({
    req(volcano_data())
    
    data <- volcano_data()
    
    # Update significance based on user cutoffs
    data <- data %>%
      mutate(
        Change = case_when(
          logFC > input$volcano_fc_cutoff & FDR < input$volcano_fdr_cutoff ~ "Increased",
          logFC < -input$volcano_fc_cutoff & FDR < input$volcano_fdr_cutoff ~ "Decreased",
          TRUE ~ "Unchanged"
        )
      )
    
    p <- plot_ly(
      data = data,
      x = ~logFC,
      y = ~neg_log10_fdr,
      color = ~Change,
      colors = VOLCANO_COLORS,
      text = ~hover_text,
      hoverinfo = "text",
      type = "scatter",
      mode = "markers",
      marker = list(size = 8, opacity = 0.6),
      source = "volcano"
    ) %>%
      layout(
        title = paste("Volcano Plot:", input$volcano_cell_line, "-", 
                      input$volcano_time_point, "Tg vs DMSO"),
        xaxis = list(title = "log2 Fold Change", gridcolor = "#e0e0e0"),
        yaxis = list(title = "-log10(FDR)", gridcolor = "#e0e0e0"),
        plot_bgcolor = "#fafafa",
        paper_bgcolor = "white",
        shapes = list(
          # Horizontal line for FDR cutoff
          list(type = "line", x0 = -10, x1 = 10,
               y0 = -log10(input$volcano_fdr_cutoff),
               y1 = -log10(input$volcano_fdr_cutoff),
               line = list(dash = "dash", color = "red", width = 1)),
          # Vertical lines for FC cutoffs
          list(type = "line", x0 = input$volcano_fc_cutoff,
               x1 = input$volcano_fc_cutoff,
               y0 = 0, y1 = max(data$neg_log10_fdr, na.rm = TRUE),
               line = list(dash = "dash", color = "red", width = 1)),
          list(type = "line", x0 = -input$volcano_fc_cutoff,
               x1 = -input$volcano_fc_cutoff,
               y0 = 0, y1 = max(data$neg_log10_fdr, na.rm = TRUE),
               line = list(dash = "dash", color = "red", width = 1))
        )
      )

    p
  })
  
  # Volcano plot statistics
  output$volcano_stats <- renderTable({
    req(volcano_data())
    
    data <- volcano_data() %>%
      mutate(
        Change = case_when(
          logFC > input$volcano_fc_cutoff & FDR < input$volcano_fdr_cutoff ~ "Increased",
          logFC < -input$volcano_fc_cutoff & FDR < input$volcano_fdr_cutoff ~ "Decreased",
          TRUE ~ "Unchanged"
        )
      )
    
    stats <- data.frame(
      Category = c("Total Genes", "Significantly Increased", "Significantly Decreased", "Unchanged"),
      Count = c(
        nrow(data),
        sum(data$Change == "Increased"),
        sum(data$Change == "Decreased"),
        sum(data$Change == "Unchanged")
      )
    )
    
    stats
  })
  
  # Selected genes from volcano plot
  output$selected_genes <- renderPrint({
    event_data <- event_data("plotly_selected", source = "volcano")
    if (!is.null(event_data)) {
      data <- volcano_data()
      selected_indices <- event_data$pointNumber + 1
      selected_genes <- data$genes[selected_indices]
      cat(paste(selected_genes, collapse = "\n"))
    } else {
      cat("Click and drag to select genes")
    }
  })
  
  # Volcano plot table
  output$volcano_table <- renderDT({
    req(volcano_data())
    
    data <- volcano_data() %>%
      dplyr::filter(FDR < input$volcano_fdr_cutoff) %>%
      dplyr::select(Gene = genes, `Log2 FC` = logFC, FDR, Status = Change) %>%
      arrange(FDR)
    
    datatable(data, options = list(pageLength = 10, scrollX = TRUE),
              rownames = FALSE) %>%
      formatRound(columns = c("Log2 FC"), digits = 3) %>%
      formatSignif(columns = c("FDR"), digits = 3)
  })
  
  # Download volcano data
  output$download_volcano_data <- downloadHandler(
    filename = function() {
      paste0("volcano_", input$volcano_cell_line, "_", 
             input$volcano_time_point, "_", Sys.Date(), ".csv")
    },
    content = function(file) {
      data <- volcano_data() %>%
        dplyr::filter(FDR < input$volcano_fdr_cutoff)
      write.csv(data, file, row.names = FALSE)
    }
  )
  
  # Load predefined gene sets
  observeEvent(input$load_er_stress, {
    updateTextAreaInput(session, "gene_list",
                        value = "Ddit3\nHspa5\nAtf4\nAtf6\nXbp1\nErn1\nEif2ak3\nAtf3\nGadd45a\nHerpud1")
  })
  
  observeEvent(input$load_apoptosis, {
    updateTextAreaInput(session, "gene_list",
                        value = "Casp3\nCasp7\nCasp8\nCasp9\nBax\nBcl2\nBcl2l1\nMcl1\nParp1\nCycs")
  })
  
  observeEvent(input$load_beta_cell, {
    updateTextAreaInput(session, "gene_list",
                        value = "Ins1\nIns2\nPdx1\nNkx6-1\nNkx2-2\nPax6\nNeurod1\nMafa\nMafb\nFoxa2")
  })
  
  # Additional custom gene sets
  observeEvent(input$load_mitochondrial, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Ndufa1", "Ndufa2", "Ndufa4", "Ndufs1",
                          "Sdha", "Sdhb", "Sdhc", "Sdhd",
                          "Uqcrc1", "Uqcrc2", "Uqcrb",
                          "Cox4i1", "Cox5a", "Cox5b", "Cox6a1",
                          "Atp5a1", "Atp5b", "Atp5c1"
                        ), collapse = "\n"))
  })
  
  observeEvent(input$load_autophagy, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Atg3", "Atg5", "Atg7", "Atg12", "Atg16l1",
                          "Becn1", "Map1lc3a", "Map1lc3b",
                          "Sqstm1", "Ulk1", "Ulk2",
                          "Lamp1", "Lamp2", "Tfeb"
                        ), collapse = "\n"))
  })
  
  observeEvent(input$load_cell_cycle, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Ccna2", "Ccnb1", "Ccnb2", "Ccnd1", "Ccne1",
                          "Cdk1", "Cdk2", "Cdk4", "Cdk6",
                          "Cdkn1a", "Cdkn1b", "Cdkn2a",
                          "E2f1", "E2f2", "Rb1"
                        ), collapse = "\n"))
  })
  
  # UPR-ER genes (comprehensive)
  observeEvent(input$load_upr_er, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Hspa5", "Atf6", "Atf6b", "Creb3l1", "Creb3l2", "Creb3l3", "Dnajc3",
                          "Add1", "Apaf1", "Bak1", "Bcap31", "Dnajb2", "Dnajc10", "Amfr",
                          "Ankzf1", "Aup1", "Bag6", "Brsk2", "Calr", "Calr3", "Calr4", "Canx",
                          "Ccdc47", "Clgn", "Derl1", "Derl2", "Derl3", "Dnajb12", "Ecpas",
                          "Edem1", "Edem2", "Edem3", "Erlec1", "Erlin1", "Erlin2", "Faf1",
                          "Faf2", "Fbxo17", "Fbxo2", "Fbxo27", "Fbxo44", "Fbxo6", "Foxred2",
                          "Get4", "Gmppb", "Herpud1", "Herpud2", "Hm13", "Jkamp", "Jkampl",
                          "Man1a1", "Man1a2", "Man1b1", "Man1c1", "Marchf6", "Nccrp1", "Nploc4",
                          "Nrros", "Os9", "Psmc6", "Rcn3", "Rhbdd1", "Rnf103", "Rnf121",
                          "Rnf139", "Rnf185", "Rnf5", "Sdf2l1", "Sec61b", "Sec61bl", "Sel1l",
                          "Sel1l2", "Selenos", "Sgta", "Stt3b", "Stub1", "Syvn1", "Tmem129",
                          "Tmem67", "Tmub1", "Tmub2", "Tor1a", "Trim13", "Trim25", "Ube2g2",
                          "Ube2j1", "Ube2j2", "Ube4a", "Ube4b", "Ubqln1", "Ubqln2", "Ubxn10",
                          "Ubxn4", "Ubxn6", "Ubxn8", "Ufd1", "Uggt1", "Uggt2", "Umod", "Usp19",
                          "Vcp", "Wfs1", "Yod1", "Dnajb9", "Ern1", "Ern2", "Map3k5", "Xbp1",
                          "Eif2ak3", "Ddit3", "Atf4", "Eif2a", "Trib3", "Txnip", "Ppp1cc",
                          "Ppp1r15a", "Ppp1r15b", "Manf", "Creld2"
                        ), collapse = "\n"))
  })
  
  # UPR-Mito genes
  observeEvent(input$load_upr_mito, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c("Atf5", "Lonp1", "Ubl5"), collapse = "\n"))
  })
  
  # ERAD genes
  observeEvent(input$load_erad, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Hspa5", "Dnajb2", "Dnajc10", "Amfr", "Ankzf1", "Aup1", "Bag6",
                          "Brsk2", "Calr", "Calr3", "Calr4", "Canx", "Ccdc47", "Clgn",
                          "Derl1", "Derl2", "Derl3", "Dnajb12", "Ecpas", "Edem1", "Edem2",
                          "Edem3", "Erlec1", "Erlin1", "Erlin2", "Faf1", "Faf2", "Fbxo17",
                          "Fbxo2", "Fbxo27", "Fbxo44", "Fbxo6", "Foxred2", "Get4", "Gmppb",
                          "Herpud1", "Herpud2", "Hm13", "Jkamp", "Jkampl", "Man1a1", "Man1a2",
                          "Man1b1", "Man1c1", "Marchf6", "Nccrp1", "Nploc4", "Nrros", "Os9",
                          "Psmc6", "Rcn3", "Rhbdd1", "Rnf103", "Rnf121", "Rnf139", "Rnf185",
                          "Rnf5", "Sdf2l1", "Sec61b", "Sec61bl", "Sel1l", "Sel1l2", "Selenos",
                          "Sgta", "Stt3b", "Stub1", "Syvn1", "Tmem129", "Tmem67", "Tmub1",
                          "Tmub2", "Tor1a", "Trim13", "Trim25", "Ube2g2", "Ube2j1", "Ube2j2",
                          "Ube4a", "Ube4b", "Ubqln1", "Ubqln2", "Ubxn10", "Ubxn4", "Ubxn6",
                          "Ubxn8", "Ufd1", "Uggt1", "Uggt2", "Umod", "Usp19", "Vcp", "Wfs1",
                          "Yod1", "Dnajb9", "Eif2ak3"
                        ), collapse = "\n"))
  })
  
  # IRE1/XBP1s pathway
  observeEvent(input$load_ire1_xbp1, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Jun", "Traf2", "Dnajb9", "Ern1", "Ern2", "Map3k5", "Xbp1"
                        ), collapse = "\n"))
  })
  
  # PERK pathway
  observeEvent(input$load_perk, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Eif2ak3", "Ddit3", "Atf4", "Eif2a", "Trib3", "Txnip",
                          "Ppp1cc", "Ppp1r15a", "Ppp1r15b"
                        ), collapse = "\n"))
  })
  
  # ATF6 pathway
  observeEvent(input$load_atf6, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Hspa5", "Atf6", "Atf6b", "Creb3l1", "Creb3l2", "Creb3l3", "Dnajc3"
                        ), collapse = "\n"))
  })
  
  # Cell Death genes (comprehensive)
  observeEvent(input$load_cell_death, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Mapk8", "Pmaip1", "Traf2", "Bcl2l11", "Bid", "Casp3", "Casp9",
                          "Dnm1l", "Lmna", "Tnfrsf10b", "Acin1", "Apc", "Apip", "Aven",
                          "Bad", "Bax", "Bcl2l1", "Birc2", "Bmf", "Bmx", "Casp6", "Casp7",
                          "Casp8", "Cd14", "Cflar", "Clspn", "Cycs", "Dcc", "Dffa", "Dffb",
                          "Diablo", "Dsg1a", "Dsg2", "Dsg3", "Dsp", "Dynll1", "Dynll2",
                          "Fadd", "Fas", "Fasl", "Fnta", "Gas2", "Gm10053", "Gsdmd", "Gsdme",
                          "Gsn", "Gzmb", "H1f0", "H1f1", "H1f2", "H1f4", "H1f5", "Hmgb1",
                          "Hmgb2", "Kpna1", "Kpnb1", "Lmnb1", "Ly96", "Mapk1", "Mapk3",
                          "Mapt", "Nmt1", "Ocln", "Oma1", "Opa1", "Pkp1", "Plec", "Ppp3cc",
                          "Ppp3r1", "Prkcd", "Prkcq", "Ptk2", "Ripk1", "Rock1", "Satb1",
                          "Septin4", "Sfn", "Sorbs2", "Sptan1", "Stk24", "Stk26", "Ticam1",
                          "Ticam2", "Tjp1", "Tjp2", "Tlr4", "Tnfsf10", "Tradd", "Vim",
                          "Xiap", "Ywhab", "Ywhae", "Ywhag", "Ywhah", "Ywhaq", "Ywhaz",
                          "Ctnnb1", "Add1", "Apaf1", "Bak1", "Bcap31"
                        ), collapse = "\n"))
  })
  
  # Autophagy genes
  observeEvent(input$load_autophagy, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Psen1", "Atg12", "Atg13", "Atg14", "Atg16l1", "Atg16l2", "Atg2a",
                          "Atg3", "Atg5", "Atg7", "Atp6ap2", "Becn1", "Calcoco2", "Epg5",
                          "Lamp1", "Pik3c3", "Rb1cc1", "Sqstm1", "Ulk1", "Ulk2", "Uvrag"
                        ), collapse = "\n"))
  })
  
  # Pro-survival genes
  observeEvent(input$load_prosurvival, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Psen1", "Dad1", "H13", "Plk", "Rfc4", "Ssr4", "Manf"
                        ), collapse = "\n"))
  })
  
  # Classic apoptosis
  observeEvent(input$load_apoptosis_classic, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Casp3", "Casp7", "Casp8", "Casp9", "Bax", "Bcl2", "Bcl2l1",
                          "Mcl1", "Parp1", "Cycs", "Bid", "Bad", "Bak1", "Apaf1"
                        ), collapse = "\n"))
  })
  
  # Beta cell transcription factors
  observeEvent(input$load_beta_tfs, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Ctnnb1", "Foxa2", "Neurod1", "Nsd1", "Pdx1", "Bmp5", "Crtc2",
                          "Ep300", "Foxo1", "Ins1m", "Isl1", "Mafa", "Mafb", "Mnx1",
                          "Nkx2-2", "Nkx6-1", "Pax6", "Rfx2", "Rfx3", "Rfx6", "Rreb1",
                          "Scrt1", "Tcf7l2", "Tshz1", "Ucn3", "Wnt4", "Zfp148"
                        ), collapse = "\n"))
  })
  
  # Insulin secretion genes
  observeEvent(input$load_insulin_secretion, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Scgn", "Vgf", "Doc2b", "Napa", "Nsf", "Stx1a", "Stx4", "Stxbp1",
                          "Stxbp3", "Stxbp5", "Stxbp5l", "Syt4", "Syt7", "Syt9", "Unc13a",
                          "Unc13b", "Vamp2", "Ap3b1", "Cdc42", "Chga", "Chgb", "Sec23a",
                          "Sec24a", "Sec24d", "Hsp90b1", "Ptbp1", "Pam", "Pcsk1", "Pcsk2",
                          "Scg5", "Rab27a", "Rab3a", "P4hb", "Ssr1", "Cdkal1", "Cpe",
                          "Ddx1", "Eif3a", "Eif4b", "Erc1", "Ero1b", "Ero1lb", "Ins2",
                          "Slc30a5", "Slc30a8", "Yipf5", "Abcc8", "Ano1", "Cacna1d",
                          "Kcnh2", "Kcnq1", "Appl1", "Pgm1", "Gck", "Glud1", "Hadh",
                          "Adcy7", "Trmt10a", "Pmm2", "Hnf1a", "Hnf1b", "Hnf4a", "Klf11",
                          "Pax4", "Yars", "Blk", "Cel", "Eif2s3", "Glis3", "Ins", "Insr",
                          "Ucp2", "Kcnj11", "Foxa2", "Neurod1", "Nsd1", "Pdx1"
                        ), collapse = "\n"))
  })
  
  # Calcium and potassium handling
  observeEvent(input$load_ca_handling, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Kcnj11", "Atp2a1", "Atp2a3", "Itpr1", "Atp2a2", "Atp2b1",
                          "Atp2b2", "Atp2b3", "Atp2b4", "Atp2c1", "Cacna1c", "Itpr2",
                          "Itpr3", "Letm1", "Mcoln1", "Mcoln2", "Mcoln3", "Mcu", "Mcub",
                          "Micu1", "Micu2", "Micu3", "Orai1", "Orai2", "Orai3", "Pkd2",
                          "Pkd2l1", "Ryr1", "Ryr2", "Ryr3", "Slc24a1", "Slc24a2", "Slc24a3",
                          "Slc24a4", "Slc24a5", "Slc8a1", "Slc8a2", "Slc8a3", "Slc8b1",
                          "Smdt1", "Trpc1", "Trpc2", "Trpc3", "Trpc4", "Trpc5", "Trpc6",
                          "Trpc7", "Trpv1", "Trpv2", "Trpv3", "Trpv4", "Trpv5", "Trpv6",
                          "Abcc8", "Ano1", "Cacna1d", "Kcnh2", "Kcnq1"
                        ), collapse = "\n"))
  })
  
  # Disallowed beta cell genes
  observeEvent(input$load_disallowed, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Hk1", "Slc16a1", "Acot7", "Arhgdib", "Cat", "Cxcl12", "Hsd11b1",
                          "Igf1", "Igfbp4", "Itih5", "Ldha", "Maf", "Mgll", "Oat", "Pdgfra",
                          "Smad3", "Smoc2", "Yap1", "Zfp36l1", "Zyx"
                        ), collapse = "\n"))
  })
  
  # Exocytosis genes
  observeEvent(input$load_exocytosis, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Scgn", "Vgf", "Doc2b", "Napa", "Nsf", "Stx1a", "Stx4", "Stxbp1",
                          "Stxbp3", "Stxbp5", "Stxbp5l", "Syt4", "Syt7", "Syt9", "Unc13a",
                          "Unc13b", "Vamp2", "Ap3b1", "Cdc42", "Chga", "Chgb"
                        ), collapse = "\n"))
  })
  
  # Glycolysis and TCA cycle
  observeEvent(input$load_glycolysis, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Aldoa", "Aldob", "Aldoc", "Bpgm", "Eno1", "Eno2", "Eno3",
                          "Gapdh", "Gapdhs", "Gpi", "Hk2", "Hkdc1", "Pfkfb1", "Pfkfb2",
                          "Pfkfb3", "Pfkfb4", "Pfkl", "Pfkm", "Pfkp", "Pgam1", "Pgam2",
                          "Pgam4", "Pgk1", "Pklr", "Pkm", "Ppp2ca", "Ppp2r1a", "Ppp2r1b",
                          "Ppp2r5d", "Tpi1", "Aco2", "Acsl3", "Acsl4", "Adsl1", "Cs",
                          "Dld", "Dlst", "Fh", "Glud2", "Gucy2c", "Idh1", "Idh2", "Idh3a",
                          "Idh3b", "Idh3g", "Mdh2", "Me3", "Nnt", "Ogdh", "Sdha", "Sdhb",
                          "Sdhc", "Sdhd", "Sucla2", "Suclg1", "Suclg2", "Gck", "Glud1",
                          "Hadh", "Ppp2cb"
                        ), collapse = "\n"))
  })
  
  # Serine/1C metabolism
  observeEvent(input$load_serine_1c, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Aldh1l2", "Mthfd1", "Mthfd2", "Phgdh", "Psat1", "Psph",
                          "Shmt1", "Shmt2"
                        ), collapse = "\n"))
  })
  
  # Purine biosynthesis
  observeEvent(input$load_purine, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Adsl", "Adss", "Ak1", "Ampd2", "Ampd3", "Aprt", "Atic", "Gmps"
                        ), collapse = "\n"))
  })
  
  # Redox stress
  observeEvent(input$load_redox, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Bcl2", "Dusp10", "Elk1", "Map2k3", "Map2k4", "Map2k6", "Mapk11",
                          "Mapk12", "Mapk13", "Mapk14", "Mapk9", "Max", "Mef2c", "Mknk1",
                          "Mknk2", "Myc", "Pla2g4a", "Stat1", "Txn", "Mapk8", "Jun", "Ddit3"
                        ), collapse = "\n"))
  })
  
  # Immediate early response
  observeEvent(input$load_ier, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Jun", "Atf3", "Ccl2", "Bhlhe40", "Ccn1", "Ccn2", "Ccnl1",
                          "Cebpd", "Csrnp1", "Cxcl3", "Dusp1", "Dusp5", "Dusp6", "Egr1",
                          "Egr3", "F3", "Flg", "Fos", "Fosb", "Gadd45b", "Gbp1", "Gem",
                          "Hbegf", "Ier3", "Il6", "Junb", "Klf10", "Klf6", "Klhl21",
                          "Ldlr", "Mcl1", "Nfkbia", "Nfkbiz", "Nr2c2", "Nr4a1", "Nr4a2",
                          "Plau", "Rcan1", "Sgk1", "Slc2a3", "Srf", "Tnfaip3", "Trib1",
                          "Tsc22d1", "Zfp36", "Pmaip1"
                        ), collapse = "\n"))
  })
  
  # Hyperinsulinism and MODY genes
  observeEvent(input$load_hyperins_mody, {
    updateTextAreaInput(session, "gene_list",
                        value = paste(c(
                          "Kcnj11", "Foxa2", "Neurod1", "Nsd1", "Pdx1", "Hk1", "Slc16a1",
                          "Abcc8", "Ano1", "Cacna1d", "Kcnh2", "Kcnq1", "Appl1", "Pgm1",
                          "Gck", "Glud1", "Hadh", "Adcy7", "Trmt10a", "Pmm2", "Hnf1a",
                          "Hnf1b", "Hnf4a", "Klf11", "Pax4", "Yars", "Blk", "Cel",
                          "Eif2s3", "Glis3", "Ins", "Insr", "Ucp2"
                        ), collapse = "\n"))
  })
  
  # Create dynamic buttons for unique gene sets
  output$unique_gene_buttons <- renderUI({
    req(unique_gene_sets())
    
    # Group buttons by cell line for better organization
    cell_lines_with_sets <- unique(gsub("_.*", "", names(unique_gene_sets())))
    
    button_rows <- lapply(cell_lines_with_sets, function(cell_line) {
      # Get all sets for this cell line
      cell_sets <- names(unique_gene_sets())[grepl(paste0("^", cell_line), names(unique_gene_sets()))]
      
      if (length(cell_sets) > 0) {
        buttons <- lapply(cell_sets, function(set_name) {
          # Create cleaner label
          label <- gsub(paste0(cell_line, "_"), "", set_name)
          label <- gsub("unique_", "", label)
          label <- gsub("top[0-9]+_", "", label)
          label <- gsub("_", " ", label)
          label <- paste0(cell_line, ": ", label)
          
          actionButton(
            inputId = paste0("load_unique_", gsub("[^A-Za-z0-9]", "_", set_name)),
            label = label,
            class = "btn-warning btn-sm",
            style = "margin: 2px;"
          )
        })
        
        fluidRow(
          column(12,
                 h6(paste0(cell_line, " Unique Sets:"), style = "margin-top: 10px;"),
                 do.call(tagList, buttons)
          )
        )
      }
    })
    
    do.call(tagList, button_rows)
  })
  
  # Create observers for each unique gene set button
  observe({
    req(unique_gene_sets())
    
    lapply(names(unique_gene_sets()), function(set_name) {
      button_id <- paste0("load_unique_", gsub("[^A-Za-z0-9]", "_", set_name))
      
      observeEvent(input[[button_id]], {
        genes <- unique_gene_sets()[[set_name]]
        updateTextAreaInput(session, "gene_list",
                            value = paste(genes, collapse = "\n"))
        
        # FIXED: Changed type from "success" to "message"
        showNotification(
          paste("Loaded", length(genes), "genes from", set_name),
          type = "message",  # FIXED: Changed from "success" to "message"
          duration = 3
        )
      }, ignoreInit = TRUE)
    })
  })
  
  # Gene set analysis data
  geneset_data <- eventReactive(input$analyze_genes, {
    req(input$gene_list)
    
    # Parse gene list - PRESERVE ORDER
    genes_raw <- strsplit(input$gene_list, "[,\n\r\t ]+")[[1]]
    genes_input <- trimws(genes_raw)
    genes_input <- genes_input[genes_input != ""]
    
    if (length(genes_input) == 0) {
      showNotification("Please enter at least one gene", type = "warning")
      return(NULL)
    }
    
    print(paste("User input genes in order:", paste(genes_input, collapse=", ")))
    
    # Create a mapping to preserve order while doing case-insensitive matching
    data_genes_lower <- tolower(merged_data()$genes)
    
    # Match each input gene to the dataset, preserving order
    matched_genes <- character()
    missing_genes <- character()
    
    for (i in seq_along(genes_input)) {
      gene_lower <- tolower(genes_input[i])
      match_idx <- which(data_genes_lower == gene_lower)
      
      if (length(match_idx) > 0) {
        # Use the first match and get the actual gene name from the data
        matched_genes <- c(matched_genes, merged_data()$genes[match_idx[1]])
      } else {
        missing_genes <- c(missing_genes, genes_input[i])
      }
    }
    
    print(paste("Matched genes in order:", paste(matched_genes, collapse=", ")))
    
    if (length(missing_genes) > 0) {
      showNotification(paste("Genes not found:", paste(missing_genes, collapse = ", ")),
                       type = "warning", duration = 10)
    }
    
    if (length(matched_genes) == 0) {
      showNotification("No genes found in dataset", type = "error")
      return(NULL)
    }
    
    # Pass the matched genes IN THE ORIGINAL INPUT ORDER
    prepare_dotplot_data(merged_data(), matched_genes, input$geneset_time_point)
  })
  
  # Dynamic UI for gene set plot with adjustable height
  output$geneset_plot_ui <- renderUI({
    req(geneset_data())
    
    # Calculate height based on number of genes
    n_genes <- length(unique(geneset_data()$gene))
    # Minimum 400px, add 25px per gene, max 1500px
    plot_height <- min(max(400, n_genes * 25 + 100), 1500)
    
    plotOutput("geneset_plot", height = paste0(plot_height, "px"))
  })
  
  # Render gene set dot plot
  output$geneset_plot <- renderPlot({
    req(geneset_data())
    
    data <- geneset_data()
    
    # Debug: Check if factor levels are preserved
    print(paste("Gene order in plot data:", paste(levels(data$gene), collapse=", ")))
    
    # IMPORTANT: Reverse the levels for the y-axis so first gene appears at top
    data$gene <- factor(data$gene, levels = rev(levels(data$gene)))
    
    # Set color scale based on selection
    if (input$plot_color_by == "fdr") {
      p <- ggplot(data, aes(x = cell_line, y = gene)) +
        geom_point(aes(size = expression, fill = neg_log10_fdr), 
                   shape = 21, stroke = 0.5, color = "black") +
        scale_fill_viridis(name = "-log10(FDR)", option = "plasma", direction = -1) +
        scale_size_continuous(name = "log10(TPM + 1)", range = c(2, 10))
    } else if (input$plot_color_by == "logfc") {
      max_fc <- max(abs(data$logFC), na.rm = TRUE)
      p <- ggplot(data, aes(x = cell_line, y = gene)) +
        geom_point(aes(size = expression, fill = logFC), 
                   shape = 21, stroke = 0.5, color = "black") +
        scale_fill_gradient2(name = "log2(FC)", 
                             low = "blue", mid = "white", high = "red",
                             midpoint = 0, limits = c(-max_fc, max_fc)) +
        scale_size_continuous(name = "log10(TPM + 1)", range = c(2, 10))
    }
    
    # IMPORTANT: Use scale_y_discrete to maintain factor order
    p <- p +
      scale_y_discrete(drop = FALSE) +  # This preserves the factor levels
      theme_minimal() +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
        axis.text.y = element_text(size = 11),
        axis.title = element_text(size = 13, face = "bold"),
        legend.title = element_text(size = 12, face = "bold"),
        panel.grid.major = element_line(color = "grey90"),
        panel.border = element_rect(color = "black", fill = NA),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
      ) +
      labs(
        x = "Cell Line",
        y = "Gene",
        title = paste("Gene Expression -", input$geneset_time_point, "Tg vs DMSO")
      )
    
    # Add significance markers if requested
    if (input$show_significance) {
      sig_data <- data[data$significance != "", ]
      if (nrow(sig_data) > 0) {
        p <- p + geom_text(data = sig_data, aes(label = significance),
                           size = 5, vjust = 0.5, hjust = -0.3)
      }
    }
    
    p
  })
  
  # Gene set data table
  output$geneset_table <- renderDT({
    req(geneset_data())
    
    data <- geneset_data() %>%
      dplyr::select(Gene = gene, `Cell Line` = cell_line,
             `Log2 FC` = logFC, FDR, `Avg TPM` = avg_tpm,
             Regulation = regulation) %>%
      arrange(Gene, `Cell Line`)
    
    datatable(data, options = list(pageLength = 15, scrollX = TRUE),
              rownames = FALSE) %>%
      formatRound(columns = c("Log2 FC", "Avg TPM"), digits = 3) %>%
      formatSignif(columns = "FDR", digits = 3)
  })
  
  # Download gene set plot
  output$download_geneset_plot <- downloadHandler(
    filename = function() {
      paste0("geneset_dotplot_", input$geneset_time_point, "_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      data <- geneset_data()
      
      # Reverse the levels for the y-axis so first gene appears at top
      data$gene <- factor(data$gene, levels = rev(levels(data$gene)))
      
      # Calculate dynamic height based on number of genes
      n_genes <- length(unique(data$gene))
      plot_height <- min(max(6, n_genes * 0.3 + 2), 20)
      
      pdf(file, width = 7.5, height = plot_height)
      
      if (input$plot_color_by == "fdr") {
        p <- ggplot(data, aes(x = cell_line, y = gene)) +
          geom_point(aes(size = expression, fill = neg_log10_fdr), 
                     shape = 21, stroke = 0.5, color = "black") +
          scale_fill_viridis(name = "-log10(FDR)", option = "plasma", direction = -1) +
          scale_size_continuous(name = "log10(TPM + 1)", range = c(2, 10))
      } else if (input$plot_color_by == "logfc") {
        max_fc <- max(abs(data$logFC), na.rm = TRUE)
        p <- ggplot(data, aes(x = cell_line, y = gene)) +
          geom_point(aes(size = expression, fill = logFC), 
                     shape = 21, stroke = 0.5, color = "black") +
          scale_fill_gradient2(name = "log2(FC)", 
                               low = "blue", mid = "white", high = "red",
                               midpoint = 0, limits = c(-max_fc, max_fc)) +
          scale_size_continuous(name = "log10(TPM + 1)", range = c(2, 10))
      }
      
      p <- p +
        scale_y_discrete(drop = FALSE) +  # Preserve factor levels
        theme_minimal() +
        theme(
          axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
          axis.text.y = element_text(size = 14),
          axis.title = element_text(size = 13, face = "bold"),
          legend.title = element_text(size = 12, face = "bold"),
          panel.grid.major = element_line(color = "grey90"),
          panel.border = element_rect(color = "black", fill = NA),
          plot.title = element_text(hjust = 0.5, size = 14, face = "bold")
        ) +
        labs(
          x = "Cell Line",
          y = "Gene",
          title = paste("Gene Expression -", input$geneset_time_point, "Tg vs DMSO")
        )
      
      if (input$show_significance) {
        sig_data <- data[data$significance != "", ]
        if (nrow(sig_data) > 0) {
          p <- p + geom_text(data = sig_data, aes(label = significance),
                             size = 5, vjust = 0.5, hjust = -0.3)
        }
      }
      
      print(p)
      dev.off()
    }
  )
  
  # Cell line selection buttons
  observeEvent(input$select_all_cells, {
    updateCheckboxInput(session, "show_MIN6", value = TRUE)
    updateCheckboxInput(session, "show_aTC1", value = TRUE)
    updateCheckboxInput(session, "show_MGN3", value = TRUE)
    updateCheckboxInput(session, "show_GLUTag", value = TRUE)
    updateCheckboxInput(session, "show_PCCL3", value = TRUE)
    updateCheckboxInput(session, "show_QGP1", value = TRUE)
  })
  
  observeEvent(input$clear_all_cells, {
    updateCheckboxInput(session, "show_MIN6", value = FALSE)
    updateCheckboxInput(session, "show_aTC1", value = FALSE)
    updateCheckboxInput(session, "show_MGN3", value = FALSE)
    updateCheckboxInput(session, "show_GLUTag", value = FALSE)
    updateCheckboxInput(session, "show_PCCL3", value = FALSE)
    updateCheckboxInput(session, "show_QGP1", value = FALSE)
  })
  
  # Filtered data based on cell line selection
  filtered_table_data <- reactive({
    req(merged_data())
    
    # Get selected cell lines
    selected_cells <- c()
    if (input$show_MIN6) selected_cells <- c(selected_cells, "MIN6")
    if (input$show_aTC1) selected_cells <- c(selected_cells, "aTC1")
    if (input$show_MGN3) selected_cells <- c(selected_cells, "MGN3")
    if (input$show_GLUTag) selected_cells <- c(selected_cells, "GLUTag")
    if (input$show_PCCL3) selected_cells <- c(selected_cells, "PCCL3")
    if (input$show_QGP1) selected_cells <- c(selected_cells, "QGP1")
    
    if (length(selected_cells) == 0) {
      return(data.frame(genes = character(0)))
    }
    
    # Get columns for selected cell lines
    cols_to_keep <- "genes"
    for (cell in selected_cells) {
      # Get logFC and FDR columns for this cell line
      cell_cols <- grep(paste0("(logFC|FDR).*", cell), colnames(merged_data()), value = TRUE)
      # Get TPM columns if present
      tpm_cols <- grep(paste0("^", cell, "_"), colnames(merged_data()), value = TRUE)
      cols_to_keep <- c(cols_to_keep, cell_cols, tpm_cols)
    }
    
    # Keep unique columns
    cols_to_keep <- unique(cols_to_keep)
    cols_to_keep <- cols_to_keep[cols_to_keep %in% colnames(merged_data())]
    
    merged_data()[, cols_to_keep, drop = FALSE]
  })
  
  # Full data table
  output$full_data_table <- renderDT({
    req(filtered_table_data())
    
    datatable(filtered_table_data(), 
              options = list(
                pageLength = 25,
                scrollX = TRUE,
                scrollY = "500px",
                fixedColumns = list(leftColumns = 1)
              ),
              rownames = FALSE,
              filter = "top",
              class = "compact")
  })
  
  # Download full data
  output$download_full_data <- downloadHandler(
    filename = function() {
      selected_cells <- c()
      if (input$show_MIN6) selected_cells <- c(selected_cells, "MIN6")
      if (input$show_aTC1) selected_cells <- c(selected_cells, "aTC1")
      if (input$show_MGN3) selected_cells <- c(selected_cells, "MGN3")
      if (input$show_GLUTag) selected_cells <- c(selected_cells, "GLUTag")
      if (input$show_PCCL3) selected_cells <- c(selected_cells, "PCCL3")
      if (input$show_QGP1) selected_cells <- c(selected_cells, "QGP1")
      
      if (length(selected_cells) == 6) {
        paste0("complete_rnaseq_data_", Sys.Date(), ".csv")
      } else {
        paste0("rnaseq_data_", paste(selected_cells, collapse = "_"), "_", Sys.Date(), ".csv")
      }
    },
    content = function(file) {
      write.csv(filtered_table_data(), file, row.names = FALSE)
    }
  )
  
  ################################################################################
  ### CELL LINE COMPARISON TAB FUNCTIONS
  ################################################################################
  
  # Comparison plot
  output$comparison_plot <- renderPlotly({
    req(merged_data())
    
    # Get data for both cell lines
    logfc_x <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    logfc_y <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    fdr_x <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    fdr_y <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    
    if (!all(c(logfc_x, logfc_y) %in% colnames(merged_data()))) {
      return(NULL)
    }
    
    # Prepare comparison data
    comp_data <- merged_data() %>%
      dplyr::select(genes, all_of(c(logfc_x, logfc_y, fdr_x, fdr_y))) %>%
      dplyr::rename(x = !!logfc_x, y = !!logfc_y, fdr_x = !!fdr_x, fdr_y = !!fdr_y) %>%
      dplyr::filter(!is.na(x), !is.na(y)) %>%
      mutate(
        significant = case_when(
          fdr_x < input$comp_fdr_cutoff & fdr_y < input$comp_fdr_cutoff ~ "Both Significant",
          fdr_x < input$comp_fdr_cutoff ~ paste(input$comp_cell_x, "Only"),
          fdr_y < input$comp_fdr_cutoff ~ paste(input$comp_cell_y, "Only"),
          TRUE ~ "Not Significant"
        ),
        concordant = sign(x) == sign(y),
        hover_text = paste0(
          "Gene: ", genes, "<br>",
          input$comp_cell_x, " Log2FC: ", round(x, 3), "<br>",
          input$comp_cell_y, " Log2FC: ", round(y, 3), "<br>",
          "Status: ", significant
        )
      )
    
    # Select genes for labeling using similar strategy as volcano plot
    label_genes <- comp_data %>%
      filter(significant != "Not Significant") %>%  # Only significant genes
      mutate(
        # Distance metric: combine fold change magnitude and significance
        distance = abs(x) + abs(y) +  # Individual fold change magnitudes
          sqrt(x^2 + y^2) +   # Combined fold change magnitude (Euclidean)
          (-log10(pmax(fdr_x, 1e-300, na.rm = TRUE))) + 
          (-log10(pmax(fdr_y, 1e-300, na.rm = TRUE)))
      ) %>%
      top_n(30, distance)  # Select # of genes for labeling
    
    # Add gene_label column
    comp_data <- comp_data %>%
      mutate(gene_label = ifelse(genes %in% label_genes$genes, genes, ""))
    
    # Calculate correlation
    cor_value <- cor(comp_data$x, comp_data$y, use = "complete.obs")
    
    # Color scheme
    colors <- c(
      "Both Significant" = "red",
      "Not Significant" = "grey70"
    )
    colors[paste(input$comp_cell_x, "Only")] <- "blue"
    colors[paste(input$comp_cell_y, "Only")] <- "green"
    
    # Create plot
    p <- plot_ly(
      data = comp_data,
      x = ~x,
      y = ~y,
      color = ~significant,
      colors = colors,
      text = ~hover_text,
      hoverinfo = "text",
      type = "scatter",
      mode = "markers",
      marker = list(size = 6, opacity = 0.6)
    ) %>%
      layout(
        title = paste("Correlation: r =", round(cor_value, 3)),
        xaxis = list(
          title = paste(input$comp_cell_x, "Log2 Fold Change"),
          gridcolor = "#e0e0e0",
          zerolinecolor = "red",
          zerolinewidth = 1
        ),
        yaxis = list(
          title = paste(input$comp_cell_y, "Log2 Fold Change"),
          gridcolor = "#e0e0e0",
          zerolinecolor = "red",
          zerolinewidth = 1
        ),
        plot_bgcolor = "#fafafa",
        paper_bgcolor = "white",
        shapes = list(
          # Diagonal line for perfect correlation
          list(type = "line", x0 = -10, x1 = 10, y0 = -10, y1 = 10,
               line = list(dash = "dash", color = "black", width = 1))
        )
      )
    
    # Add gene labels for selected genes only
    labeled_data <- comp_data[comp_data$gene_label != "", ]
    if (nrow(labeled_data) > 0) {
      p <- p %>% add_text(
        data = labeled_data,
        x = ~x, y = ~y,
        text = ~gene_label,
        textposition = "top right",
        textfont = list(size = 10, color = "black"),
        showlegend = FALSE,
        hoverinfo = "skip"
      )
    }
    
    p
  })
  
  # Add download handlers after the existing comparison statistics output
  output$download_comparison_plot <- downloadHandler(
    filename = function() {
      paste0("comparison_plot_", input$comp_cell_x, "_vs_", input$comp_cell_y, "_", 
             input$comp_time_point, "_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      # Get data for both cell lines
      logfc_x <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
      logfc_y <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
      fdr_x <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
      fdr_y <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
      
      comp_data <- merged_data() %>%
        dplyr::select(genes, all_of(c(logfc_x, logfc_y, fdr_x, fdr_y))) %>%
        dplyr::rename(x = !!logfc_x, y = !!logfc_y, fdr_x = !!fdr_x, fdr_y = !!fdr_y) %>%
        dplyr::filter(!is.na(x), !is.na(y)) %>%
        mutate(
          significant = case_when(
            fdr_x < input$comp_fdr_cutoff & fdr_y < input$comp_fdr_cutoff ~ "Both Significant",
            fdr_x < input$comp_fdr_cutoff ~ paste(input$comp_cell_x, "Only"),
            fdr_y < input$comp_fdr_cutoff ~ paste(input$comp_cell_y, "Only"),
            TRUE ~ "Not Significant"
          )
        )
      
      # Select genes for labeling using similar strategy as volcano plot
      label_genes <- comp_data %>%
        filter(significant != "Not Significant") %>%  # Only significant genes
        mutate(
          # Distance metric: combine fold change magnitude and significance
          distance = sqrt(x^2 + y^2) + 
            (-log10(pmax(fdr_x, 1e-300, na.rm = TRUE))) + 
            (-log10(pmax(fdr_y, 1e-300, na.rm = TRUE)))
        ) %>%
        top_n(15, distance)  # Select top 15 genes for labeling
      
      # Add gene_label column
      comp_data <- comp_data %>%
        mutate(gene_label = ifelse(genes %in% label_genes$genes, genes, ""))
      
      cor_value <- cor(comp_data$x, comp_data$y, use = "complete.obs")
      
      # Create color vector dynamically
      color_values <- c(
        "Both Significant" = "red",
        "Not Significant" = "grey70"
      )
      color_values[paste(input$comp_cell_x, "Only")] <- "blue"
      color_values[paste(input$comp_cell_y, "Only")] <- "green"
      
      pdf(file, width = 10, height = 8)
      
      p <- ggplot(comp_data, aes(x = x, y = y, color = significant)) +
        geom_point(alpha = 0.6, size = 2) +
        geom_point(data = comp_data[comp_data$gene_label != "", ], 
                   aes(fill = significant), 
                   shape = 21, color = "black", size = 3) +  # Highlight labeled genes
        geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
        geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
        geom_abline(slope = 1, intercept = 0, color = "black", linetype = "dashed") +
        scale_color_manual(values = color_values) +
        scale_fill_manual(values = color_values, guide = "none") +  # No separate legend for fill
        labs(
          title = paste("Cell Line Comparison: r =", round(cor_value, 3)),
          x = paste(input$comp_cell_x, "Log2 Fold Change"),
          y = paste(input$comp_cell_y, "Log2 Fold Change"),
          color = "Significance"
        ) +
        theme_minimal()
      
      # Add gene labels only for selected genes
      labeled_data <- comp_data[comp_data$gene_label != "", ]
      if (nrow(labeled_data) > 0) {
        p <- p + geom_text_repel(
          data = labeled_data,
          aes(label = gene_label),
          size = 3,
          box.padding = 0.3,
          max.overlaps = 20,
          color = "black"
        )
      }
      
      print(p)
      dev.off()
    }
  )
  
  output$download_comparison_data <- downloadHandler(
    filename = function() {
      paste0("comparison_data_", input$comp_cell_x, "_vs_", input$comp_cell_y, "_", 
             input$comp_time_point, "_", Sys.Date(), ".csv")
    },
    content = function(file) {
      logfc_x <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
      logfc_y <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
      fdr_x <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
      fdr_y <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
      
      comp_data <- merged_data() %>%
        dplyr::select(genes, all_of(c(logfc_x, logfc_y, fdr_x, fdr_y))) %>%
        dplyr::rename(
          Gene = genes,
          !!paste0(input$comp_cell_x, "_LogFC") := !!logfc_x,
          !!paste0(input$comp_cell_y, "_LogFC") := !!logfc_y,
          !!paste0(input$comp_cell_x, "_FDR") := !!fdr_x,
          !!paste0(input$comp_cell_y, "_FDR") := !!fdr_y
        ) %>%
        dplyr::filter(!is.na(.[[2]]), !is.na(.[[3]]))
      
      write.csv(comp_data, file, row.names = FALSE)
    }
  )
  
  # Comparison statistics
  output$comparison_stats <- renderTable({
    req(merged_data())
    
    logfc_x <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    logfc_y <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    fdr_x <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    fdr_y <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    
    if (!all(c(logfc_x, logfc_y) %in% colnames(merged_data()))) {
      return(NULL)
    }
    
    comp_data <- merged_data() %>%
      dplyr::select(all_of(c(logfc_x, logfc_y, fdr_x, fdr_y))) %>%
      dplyr::rename(x = !!logfc_x, y = !!logfc_y, fdr_x = !!fdr_x, fdr_y = !!fdr_y) %>%
      dplyr::filter(!is.na(x) & !is.na(y))
    
    # Calculate statistics
    stats <- data.frame(
      Metric = c("Total Genes", "Pearson Correlation", "Spearman Correlation",
                 "Both Significant", "Concordant Direction", "Discordant Direction"),
      Value = c(
        nrow(comp_data),
        round(cor(comp_data$x, comp_data$y, method = "pearson"), 3),
        round(cor(comp_data$x, comp_data$y, method = "spearman"), 3),
        sum(comp_data$fdr_x < input$comp_fdr_cutoff & comp_data$fdr_y < input$comp_fdr_cutoff),
        sum(sign(comp_data$x) == sign(comp_data$y)),
        sum(sign(comp_data$x) != sign(comp_data$y))
      )
    )
    
    stats
  })
  
  # Concordant genes table
  output$concordant_genes <- renderDT({
    req(merged_data())
    
    logfc_x <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    logfc_y <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    fdr_x <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    fdr_y <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    
    if (!all(c(logfc_x, logfc_y, fdr_x, fdr_y) %in% colnames(merged_data()))) {
      return(NULL)
    }
    
    result <- merged_data() %>%
      dplyr::select(Gene = genes, all_of(c(logfc_x, logfc_y, fdr_x, fdr_y)))
    
    # Rename columns to cell line names
    names(result)[2] <- paste0(input$comp_cell_x, "_LogFC")
    names(result)[3] <- paste0(input$comp_cell_y, "_LogFC")
    names(result)[4] <- paste0(input$comp_cell_x, "_FDR")
    names(result)[5] <- paste0(input$comp_cell_y, "_FDR")
    
    # Filter and process - only significant genes in at least one cell line
    result <- result %>%
      dplyr::filter(!is.na(.[[2]]), !is.na(.[[3]]), !is.na(.[[4]]), !is.na(.[[5]])) %>%  # Remove NAs
      dplyr::filter(.[[4]] < input$comp_fdr_cutoff | .[[5]] < input$comp_fdr_cutoff) %>%  # Significant in at least one
      dplyr::filter(sign(.[[2]]) == sign(.[[3]])) %>%  # Concordant direction
      mutate(Mean_FC = (.[[2]] + .[[3]]) / 2) %>%
      arrange(desc(abs(Mean_FC))) %>%
      head(10)
    
    datatable(result, options = list(pageLength = 5, dom = 't'), rownames = FALSE) %>%
      formatRound(columns = 2:4, digits = 3) %>%
      formatSignif(columns = c(4, 5), digits = 3)  # Format FDR columns
  })
  
  # Discordant genes table
  output$discordant_genes <- renderDT({
    req(merged_data())
    
    logfc_x <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    logfc_y <- paste0("logFC_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    fdr_x <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_x)
    fdr_y <- paste0("FDR_TgvDMSO_", input$comp_time_point, "_", input$comp_cell_y)
    
    if (!all(c(logfc_x, logfc_y, fdr_x, fdr_y) %in% colnames(merged_data()))) {
      return(NULL)
    }
    
    result <- merged_data() %>%
      dplyr::select(Gene = genes, all_of(c(logfc_x, logfc_y, fdr_x, fdr_y)))
    
    # Rename columns to cell line names
    names(result)[2] <- paste0(input$comp_cell_x, "_LogFC")
    names(result)[3] <- paste0(input$comp_cell_y, "_LogFC")
    names(result)[4] <- paste0(input$comp_cell_x, "_FDR")
    names(result)[5] <- paste0(input$comp_cell_y, "_FDR")
    
    # Filter and process - only significant genes in at least one cell line
    result <- result %>%
      dplyr::filter(!is.na(.[[2]]), !is.na(.[[3]]), !is.na(.[[4]]), !is.na(.[[5]])) %>%  # Remove NAs
      dplyr::filter(.[[4]] < input$comp_fdr_cutoff | .[[5]] < input$comp_fdr_cutoff) %>%  # Significant in at least one
      dplyr::filter(sign(.[[2]]) != sign(.[[3]])) %>%  # Discordant direction
      mutate(Difference = abs(.[[2]] - .[[3]])) %>%
      arrange(desc(Difference)) %>%
      head(10)
    
    datatable(result, options = list(pageLength = 5, dom = 't'), rownames = FALSE) %>%
      formatRound(columns = 2:4, digits = 3) %>%
      formatSignif(columns = c(4, 5), digits = 3)  # Format FDR columns
  })
  
  ################################################################################
  ### UPSET PLOT TAB FUNCTIONS
  ################################################################################
  
  selected_intersection <- reactiveVal(NULL)
  
  # Interactive upset plot
  output$upset_plot <- renderPlotly({
    req(merged_data())
    
    # Create gene sets based on filters
    gene_sets <- list()
    
    # Only process the selected time point
    for (cell_line in CELL_LINES) {
      if (input$upset_time_point == "6h") {
        logfc_col <- paste0("logFC_TgvDMSO_6h_", cell_line)
        fdr_col <- paste0("FDR_TgvDMSO_6h_", cell_line)
        
        if (all(c(logfc_col, fdr_col) %in% colnames(merged_data()))) {
          # Get data and check for NAs
          logfc_vals <- merged_data()[[logfc_col]]
          fdr_vals <- merged_data()[[fdr_col]]
          
          sig_genes <- merged_data()$genes[
            !is.na(logfc_vals) & 
              !is.na(fdr_vals) &
              abs(logfc_vals) > log2(input$upset_fc_cutoff) &
              fdr_vals < input$upset_fdr_cutoff
          ]
          
          # Ensure unique genes and proper naming
          sig_genes <- unique(sig_genes[!is.na(sig_genes) & sig_genes != ""])
          gene_sets[[paste0(cell_line, "_6h")]] <- sig_genes
        }
      } else if (input$upset_time_point == "24h") {
        logfc_col <- paste0("logFC_TgvDMSO_24h_", cell_line)
        fdr_col <- paste0("FDR_TgvDMSO_24h_", cell_line)
        
        if (all(c(logfc_col, fdr_col) %in% colnames(merged_data()))) {
          # Get data and check for NAs
          logfc_vals <- merged_data()[[logfc_col]]
          fdr_vals <- merged_data()[[fdr_col]]
          
          sig_genes <- merged_data()$genes[
            !is.na(logfc_vals) & 
              !is.na(fdr_vals) &
              abs(logfc_vals) > log2(input$upset_fc_cutoff) &
              fdr_vals < input$upset_fdr_cutoff
          ]
          
          # FIXED: Ensure unique genes and proper naming
          sig_genes <- unique(sig_genes[!is.na(sig_genes) & sig_genes != ""])
          gene_sets[[paste0(cell_line, "_24h")]] <- sig_genes
        }
      }
    }
    
    # Store gene sets in reactive value for later use
    upset_gene_sets(gene_sets)
    
    # Debug: Print set sizes
    print(paste("Upset plot for", input$upset_time_point, "time point"))
    print("Gene set sizes:")
    for (set_name in names(gene_sets)) {
      print(paste(set_name, ":", length(gene_sets[[set_name]])))
    }
    
    # Create intersection matrix
    all_genes <- unique(unlist(gene_sets))
    
    if (length(all_genes) == 0) {
      return(plot_ly() %>%
               layout(
                 title = "No genes found with current filter settings",
                 xaxis = list(visible = FALSE),
                 yaxis = list(visible = FALSE)
               ))
    }
    
    intersection_matrix <- sapply(gene_sets, function(set) all_genes %in% set)
    rownames(intersection_matrix) <- all_genes
    
    # Calculate intersection sizes
    intersection_ids <- apply(intersection_matrix, 1, function(row) paste(as.integer(row), collapse = ""))
    intersection_counts <- table(intersection_ids)
    
    # Get number of intersections to show (user-defined)
    n_show <- min(input$upset_n_intersections, length(intersection_counts))
    
    # Sort and get top intersections
    top_intersections <- names(sort(intersection_counts, decreasing = TRUE)[1:n_show])
    
    # Create plot data
    plot_data <- data.frame()
    for (id in top_intersections) {
      binary <- as.integer(strsplit(id, "")[[1]])
      sets_in_intersection <- names(gene_sets)[binary == 1]
      
      # Simplify labels by removing the time point suffix (since it's all the same)
      sets_display <- gsub(paste0("_", input$upset_time_point), "", sets_in_intersection)
      
      # Create a label for display - FIXED: Use '&' instead of special character
      intersection_label <- if (length(sets_display) > 3) {
        paste0(length(sets_display), " cell lines")
      } else {
        paste(sets_display, collapse = " & ")
      }
      
      plot_data <- rbind(plot_data, data.frame(
        intersection = intersection_label,
        full_intersection = paste(sets_display, collapse = ", "),
        size = as.numeric(intersection_counts[id]),
        id = id,
        n_sets = length(sets_in_intersection),
        stringsAsFactors = FALSE
      ))
    }
    
    # Ensure no duplicate factor levels
    if (nrow(plot_data) > 0) {
      # Create unique, ordered factor levels
      plot_data$intersection <- factor(
        plot_data$intersection, 
        levels = unique(plot_data$intersection[order(plot_data$size, decreasing = TRUE)])
      )
      
      # Add color based on number of sets
      plot_data$color <- viridis::viridis(max(plot_data$n_sets))[plot_data$n_sets]
      
      # Create bar plot with proper configuration
      p <- plot_ly(
        data = plot_data,
        x = ~intersection,
        y = ~size,
        type = "bar",
        # Remove marker settings that conflict with bar type
        color = I(plot_data$color),
        text = ~paste("Cell Lines: ", full_intersection, "<br>Size: ", size),
        customdata = ~id,
        hovertemplate = "%{text}<extra></extra>",
        source = "upset_plot"
      ) %>%
        layout(
          title = paste("Upset Plot -", input$upset_time_point, "Time Point<br>",
                        "Showing top", n_show, "of", length(intersection_counts), "intersections"),
          xaxis = list(title = "Intersection", tickangle = -45),
          yaxis = list(title = "Number of Genes"),
          plot_bgcolor = "#fafafa",
          paper_bgcolor = "white"
        )
      
      p <- p %>% event_register("plotly_click")
      
      return(p)
      
    } else {
      return(plot_ly() %>%
               layout(
                 title = "No intersections found",
                 xaxis = list(visible = FALSE),
                 yaxis = list(visible = FALSE)
               ))
    }
  })
  
  # Add reactive value for gene sets
  upset_gene_sets <- reactiveVal(list())
  
  # Handle click events from upset plot
  observeEvent(event_data("plotly_click", source = "upset_plot"), {
    click_data <- event_data("plotly_click", source = "upset_plot")
    if (!is.null(click_data) && !is.null(click_data$customdata)) {
      selected_intersection(click_data$customdata)
      # Optional: Show notification to user
      showNotification(
        paste("Selected intersection with", click_data$y, "genes"),
        type = "message",
        duration = 3
      )
    }
  }, ignoreInit = TRUE, ignoreNULL = TRUE)
  
  # Update intersection genes table based on clicks
  output$intersection_genes <- renderDT({
    if (is.null(selected_intersection()) || is.null(upset_gene_sets())) {
      return(datatable(
        data.frame(Message = "Click on a bar in the upset plot to see genes"),
        options = list(dom = 't'), rownames = FALSE
      ))
    }
    
    intersection_id <- selected_intersection()
    gene_sets <- upset_gene_sets()
    
    # Get all genes
    all_genes <- unique(unlist(gene_sets))
    intersection_matrix <- sapply(gene_sets, function(set) all_genes %in% set)
    rownames(intersection_matrix) <- all_genes
    
    # Find genes in selected intersection
    intersection_ids <- apply(intersection_matrix, 1, function(row) paste(as.integer(row), collapse = ""))
    selected_genes <- all_genes[intersection_ids == intersection_id]
    
    # Create table with gene information
    if (length(selected_genes) > 0) {
      # Get which sets contain the intersection
      binary <- as.integer(strsplit(intersection_id, "")[[1]])
      sets_in_intersection <- names(gene_sets)[binary == 1]
      
      # Get additional gene information from merged_data
      gene_info <- merged_data() %>%
        dplyr::filter(genes %in% selected_genes)
      
      # Create summary table
      summary_table <- data.frame(
        Gene = gene_info$genes,
        stringsAsFactors = FALSE
      )
      
      # Add logFC and FDR for each cell line in the intersection
      # Since we're only showing one time point, this is cleaner
      for (set_name in sets_in_intersection) {
        # Parse set name to get cell line
        cell_line <- gsub(paste0("_", input$upset_time_point), "", set_name)
        
        logfc_col <- paste0("logFC_TgvDMSO_", input$upset_time_point, "_", cell_line)
        fdr_col <- paste0("FDR_TgvDMSO_", input$upset_time_point, "_", cell_line)
        
        if (all(c(logfc_col, fdr_col) %in% colnames(gene_info))) {
          summary_table[[paste0(cell_line, "_logFC")]] <- round(gene_info[[logfc_col]], 3)
          summary_table[[paste0(cell_line, "_FDR")]] <- signif(gene_info[[fdr_col]], 3)
        }
      }
      
      # Store for download
      intersection_genes_data(summary_table)
      
      datatable(summary_table, 
                options = list(
                  pageLength = 25,
                  scrollX = TRUE,
                  dom = 'lftip'
                ),
                extensions = character(0),
                rownames = FALSE) %>%
        formatRound(columns = grep("logFC", colnames(summary_table)), digits = 3) %>%
        formatSignif(columns = grep("FDR", colnames(summary_table)), digits = 3)
    } else {
      datatable(data.frame(Message = "No genes found in this intersection"),
                options = list(dom = 't'), rownames = FALSE)
    }
  })
  
  # Add reactive value to store intersection genes data
  intersection_genes_data <- reactiveVal(NULL)
  
  # Add download button in UI (in the upset tab, after the DTOutput):
  downloadButton("download_intersection_genes", "Download Gene List")
  
  # Add download handler
  output$download_intersection_genes <- downloadHandler(
    filename = function() {
      paste0("intersection_genes_", Sys.Date(), ".csv")
    },
    content = function(file) {
      data <- intersection_genes_data()
      if (!is.null(data)) {
        write.csv(data, file, row.names = FALSE)
      } else {
        write.csv(data.frame(Message = "No genes selected"), file, row.names = FALSE)
      }
    }
  )
  
  ################################################################################
  ### GSEA TAB FUNCTIONS
  ################################################################################
  
  # GSEA heatmap
  output$gsea_heatmap <- renderPlot({
    # Check if data exists
    if (is.null(gsea_data())) {
      return(ggplot() + 
               theme_void() + 
               labs(title = "No GSEA data available. Please check data/gsea_results.rds file."))
    }
    
    # Filter GSEA data
    filtered_gsea <- gsea_data()
    
    print(paste("Initial GSEA rows:", nrow(filtered_gsea)))  # Debug
    
    if (input$gsea_cell_line != "All") {
      filtered_gsea <- filtered_gsea %>% filter(cell_line == input$gsea_cell_line)
      print(paste("After cell line filter:", nrow(filtered_gsea)))  # Debug
    }
    
    if (input$gsea_time_point != "All") {
      filtered_gsea <- filtered_gsea %>% filter(time_point == input$gsea_time_point)
      print(paste("After time point filter:", nrow(filtered_gsea)))  # Debug
    }
    
    if (input$gsea_collection != "All") {
      filtered_gsea <- filtered_gsea %>% filter(collection == input$gsea_collection)
      print(paste("After collection filter:", nrow(filtered_gsea)))  # Debug
    }
    
    filtered_gsea <- filtered_gsea %>% filter(padj < input$gsea_fdr_cutoff)
    print(paste("After FDR filter:", nrow(filtered_gsea)))  # Debug
    
    if (nrow(filtered_gsea) == 0) {
      return(ggplot() + 
               theme_void() + 
               labs(title = "No significant pathways found with current filters",
                    subtitle = "Try adjusting FDR cutoff or filters"))
    }
    
    # Select top pathways
    top_pathways <- filtered_gsea %>%
      group_by(pathway) %>%
      summarise(max_nes = max(abs(NES), na.rm = TRUE)) %>%
      arrange(desc(max_nes)) %>%
      slice_head(n = 30) %>%
      pull(pathway)
    
    plot_data <- filtered_gsea %>%
      filter(pathway %in% top_pathways) %>%
      mutate(
        cell_time = paste(cell_line, time_point, sep = "_"),
        pathway_clean = gsub("^HALLMARK_", "", pathway) %>%
          gsub("_", " ", .) %>%
          str_trunc(50)
      )
    
    # Create heatmap
    p <- ggplot(plot_data, aes(x = cell_time, y = pathway_clean, fill = NES)) +
      geom_tile(color = "white") +
      geom_text(aes(label = ifelse(padj < 0.001, "***",
                                   ifelse(padj < 0.01, "**",
                                          ifelse(padj < 0.05, "*", "")))),
                color = "black", size = 4) +
      scale_fill_gradient2(
        low = "blue", mid = "white", high = "red",
        midpoint = 0, name = "NES",
        limits = c(-max(abs(plot_data$NES)), max(abs(plot_data$NES)))
      ) +
      theme_minimal() +
      theme(
        axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
        axis.text.y = element_text(size = 9),
        axis.title = element_blank(),
        legend.position = "right",
        panel.grid = element_blank(),
        panel.border = element_rect(fill = NA, color = "black"),
        plot.title = element_text(hjust = 0.5, face = "bold", size = 14),
        plot.subtitle = element_text(hjust = 0.5, size = 10)
      ) +
      labs(title = "GSEA Pathway Enrichment Heatmap",
           subtitle = paste("Showing top", length(unique(plot_data$pathway_clean)), "pathways"))
    
    p
  })
  
  # GSEA table
  output$gsea_table <- renderDT({
    # Check if data exists
    if (is.null(gsea_data())) {
      return(datatable(
        data.frame(Message = "No GSEA data available. Please check configuration."),
        options = list(dom = 't'),
        rownames = FALSE
      ))
    }
    
    # Apply same filters as heatmap
    filtered_gsea <- gsea_data()
    
    if (input$gsea_cell_line != "All") {
      filtered_gsea <- filtered_gsea %>% filter(cell_line == input$gsea_cell_line)
    }
    
    if (input$gsea_time_point != "All") {
      filtered_gsea <- filtered_gsea %>% filter(time_point == input$gsea_time_point)
    }
    
    if (input$gsea_collection != "All") {
      filtered_gsea <- filtered_gsea %>% filter(collection == input$gsea_collection)
    }
    
    filtered_gsea <- filtered_gsea %>% filter(padj < input$gsea_fdr_cutoff)
    
    if (nrow(filtered_gsea) == 0) {
      return(datatable(
        data.frame(Message = "No pathways found with current filters. Try adjusting the FDR cutoff."),
        options = list(dom = 't'),
        rownames = FALSE
      ))
    }
    
    # Format for table
    table_data <- filtered_gsea %>%
      dplyr::select(
        Pathway = pathway, 
        `Cell Line` = cell_line, 
        Time = time_point,
        Collection = collection, 
        NES, 
        `FDR` = padj,
        Direction = direction
      ) %>%
      arrange(FDR)
    
    datatable(table_data, 
              options = list(pageLength = 25, scrollX = TRUE),
              filter = "top", 
              rownames = FALSE) %>%
      formatRound(columns = "NES", digits = 3) %>%
      formatSignif(columns = "FDR", digits = 3)
  })
  
  
  # Download GSEA plot
  output$download_gsea_plot <- downloadHandler(
    filename = function() {
      paste0("gsea_heatmap_", Sys.Date(), ".pdf")
    },
    content = function(file) {
      if (is.null(gsea_data())) {
        pdf(file, width = 8, height = 6)
        plot(1, type = "n", axes = FALSE, xlab = "", ylab = "")
        text(1, 1, "No GSEA data available", cex = 2)
        dev.off()
        return()
      }
      
      # Apply filters and recreate plot
      filtered_gsea <- gsea_data()
      
      if (input$gsea_cell_line != "All") {
        filtered_gsea <- filtered_gsea %>% filter(cell_line == input$gsea_cell_line)
      }
      if (input$gsea_time_point != "All") {
        filtered_gsea <- filtered_gsea %>% filter(time_point == input$gsea_time_point)
      }
      if (input$gsea_collection != "All") {
        filtered_gsea <- filtered_gsea %>% filter(collection == input$gsea_collection)
      }
      
      filtered_gsea <- filtered_gsea %>% filter(padj < input$gsea_fdr_cutoff)
      
      if (nrow(filtered_gsea) > 0) {
        # Calculate dynamic height based on number of pathways
        n_pathways <- length(unique(filtered_gsea$pathway))
        plot_height <- min(max(8, n_pathways * 0.25 + 2), 20)
        
        pdf(file, width = 12, height = plot_height)
        
        # Create the plot (same as in renderPlot)
        top_pathways <- filtered_gsea %>%
          group_by(pathway) %>%
          summarise(max_nes = max(abs(NES), na.rm = TRUE)) %>%
          arrange(desc(max_nes)) %>%
          slice_head(n = 30) %>%
          pull(pathway)
        
        plot_data <- filtered_gsea %>%
          filter(pathway %in% top_pathways) %>%
          mutate(
            cell_time = paste(cell_line, time_point, sep = "_"),
            pathway_clean = gsub("^HALLMARK_", "", pathway) %>%
              gsub("_", " ", .) %>%
              str_trunc(50)
          )
        
        p <- ggplot(plot_data, aes(x = cell_time, y = pathway_clean, fill = NES)) +
          geom_tile(color = "white") +
          geom_text(aes(label = ifelse(padj < 0.001, "***",
                                       ifelse(padj < 0.01, "**",
                                              ifelse(padj < 0.05, "*", "")))),
                    color = "black", size = 4) +
          scale_fill_gradient2(
            low = "blue", mid = "white", high = "red",
            midpoint = 0, name = "NES"
          ) +
          theme_minimal() +
          theme(
            axis.text.x = element_text(angle = 45, hjust = 1),
            axis.text.y = element_text(size = 9),
            axis.title = element_blank(),
            legend.position = "right",
            panel.grid = element_blank(),
            panel.border = element_rect(fill = NA, color = "black"),
            plot.title = element_text(hjust = 0.5, face = "bold")
          ) +
          labs(title = "GSEA Pathway Enrichment Heatmap")
        
        print(p)
      } else {
        plot(1, type = "n", axes = FALSE, xlab = "", ylab = "")
        text(1, 1, "No significant pathways with current filters", cex = 1.5)
      }
      
      dev.off()
    }
  )
  
  # Download GSEA data
  output$download_gsea_data <- downloadHandler(
    filename = function() {
      paste0("gsea_filtered_", Sys.Date(), ".csv")
    },
    content = function(file) {
      if (is.null(gsea_data())) {
        write.csv(data.frame(Message = "No GSEA data available"), file, row.names = FALSE)
        return()
      }
      
      # Apply same filters
      filtered_gsea <- gsea_data()
      
      if (input$gsea_cell_line != "All") {
        filtered_gsea <- filtered_gsea %>% filter(cell_line == input$gsea_cell_line)
      }
      if (input$gsea_time_point != "All") {
        filtered_gsea <- filtered_gsea %>% filter(time_point == input$gsea_time_point)
      }
      if (input$gsea_collection != "All") {
        filtered_gsea <- filtered_gsea %>% filter(collection == input$gsea_collection)
      }
      
      filtered_gsea <- filtered_gsea %>% filter(padj < input$gsea_fdr_cutoff)
      
      write.csv(filtered_gsea, file, row.names = FALSE)
    }
  )
  
}

################################################################################
### RUN THE APP
################################################################################

shinyApp(ui = ui, server = server)